# message vars class

class OutputMessages():
    # setup - immortal.py
    UNSUPPORTED_EXTENSIONS = "Invalid format for SUPPORTED_EXTENSIONS"
    EXPECTED_EXTENSIONS = "Expected a string representation of a set, e.g. .pdf, .txt"
    # redis - colossus.py
    REDIS_MESSAGE_OUT_OK = "[Colossus] Message fired with key "
    REDIS_MESSAGE_OUT_KO = "[Colossus down] Failed to fire message "
    REDIS_FAILED_TO_READ = "[Colossus down] Failed to get message "
    REDIS_FAILED_TO_CONNECT = "[Colossus down] Message blocked, no connection "
    REDIS_NO_MESSAGES = "[Colossus] No messages, survailing..."
    REDIS_EXCEPTION = "[Colossus down] Just exploded "
    REDIS_DECODED_OK = "[Colossus] Decoded message "
    REDIS_DECODED_KO = "[Colossus hit] Invalid json "
    REDIS_MSG_FIELD_KO = "[Colossus hit] Missing required field"
    REDIS_MSG_CONTENT_EMPTY = "[Colossus hit] Empty content field "
    REDIS_MSG_FORMAT_KO = "[Colossus hit] Invalid base64 content"
    REDIS_CONTENT_TO_DOCUMENT_OK="[Colossus] Content transformed into standard document. "
    # watcher - sentry.py
    WATCHER_INITIALIZATION = "[Sentry] Patrolling for new files..."
    WATCHER_EXCEPTION = "[Sentry down] Exploded "
    WATCHER_TERMINATED = "[Sentry] Returning to base..."
    WATCHER_KO = "[Zealot] Destroyed."
    WATCHER_READ_FILE_START = "[Sentry] Reading file"
    WATCHER_MOVE_FILE_START = "[Sentry] Sending processed file into directory"
    WATCHER_NO_FOLDER_KO = "[Sentry] Target folder not found"
    WATCHER_QUEUE_TARGET="[Sentry] Target queue name "
    # extractor - zealot.py
    EXTRACTOR_INITIALIZATION = "[Zealot] Ready to serve."
    EXTRACTOR_EXCEPTION = "[Zealot down] Exploded "
    EXTRACTOR_TERMINATED = "[Zealot] Returning to base..."
    EXTRACTOR_KO = "[Zealot] Destroyed."
    EXTRACTOR_WAIT_START = "[Zealot] Wating for orders."
    EXTRACTOR_READ_OK = "[Zealot] Orders received."
    EXTRACTOR_READ_KO ="[Zealot hit] Unreadable orders."
    EXTRACTOR_READ_KO_MSG ="No text content found in order "
    EXTRACTOR_READ_EXCEPTION = "[Zealot hit] Failed to process orders."
    EXTRACTOR_PDF_KO = "[Zealot hit] Failed to read PDF"
    EXTRACTOR_CLEANUP_KO = "[Zealot hit] Failed to cleanup temporary file"
    EXTRACTOR_TEXT_KO = "[Zealot hit] Failed to decode text"
    EXTRACTOR_JSON_KO = "[Zealot hit] Failed to decode JSON"
    EXTRACTOR_JSON_KO_MSG = "[Zealot hit] Invalid JSON"
    EXTRACTOR_JSON_DECODE_KO = "[Zealot hit] Invalide file encoding"
    EXTRACTOR_UNSUPPORTED_TYPE = "[Zealot hit] Unsupported file type"
    # chunker - stalker.py
    CHUNKER_INITIALIZATION = "[Stalker] Ready to serve."
    CHUNKER_EXCEPTION = "[Stalker down] Exploded "
    CHUNKER_TERMINATED = "[Stalker] Returning to base..."
    CHUNKER_KO = "[Stalker] Destroyed."
    CHUNKER_WAIT_START = "[Stalker] Wating for orders."
    CHUNKER_READY = "[Stalker] Chunker sharpen"
    CHUNKER_DONE = "[Stalker] Document chunks extracted"
    # embedder - probe.py
    EMBEDDER_INITIALIZATION = "[Probe] Ready to serve."
    EMBEDDER_EXCEPTION = "[Probe down] Exploded "
    EMBEDDER_TERMINATED = "[Probe] Returning to base..."
    EMBEDDER_KO = "[Probe] Destroyed."
    EMBEDDER_WAIT_START = "[Probe] Wating for orders."
    EMBEDDER_POINTS_GENERATED="[Probe] Qdrant points generated."
    EMBEDDER_NO_MESSAGES_DECODED="[Probe] No messages in decoded data. "
    EMBEDDER_REQUEST_VECTORS_START="[Probe] Requesting vectors."
    EMBEDDER_REQUEST_VECTORS_ENDED="[Probe] Vectors acquired."
    # qdrant
    QDRANT_COLLECTION_EXISTS="[Warp Prism] Collection exists. "
    QDRANT_COLLECTION_CREATION="[Warp Prism] Collection created. "
    QDRANT_INDEX_CREATION="[Warp Prism] Index created. "
    QDRANT_POINTS_SKIPPED="[Warp Prism] Skipped point generation - empty vectors/documents"
    QDRANT_SEARCH_RESULT="[Warp Prism] Targets found "
    # metrics - phoenix.py
    # api - disruptor.py
    API_INITIALIZATION="[Disruptor] Ready to serve."
    API_HEALTHY="healthy"
    API_UNHEALTHY="unhealthy"
    API_SUCCESS="success"
    API_FALLBACK="fallback"
    API_HEALTH_KO="[Disruptor hit] System check failed."
    API_HEALTH_KO_MSG="[Disruptor hit] System is unhealthy."
    API_QUESTION="[Disruptor] System input"
    API_QUESTION_KO="[Disruptor hit] System failed to respond."
    API_CONTEXT_KO="[Disruptor] System failed to retrieve context"
    API_EMBEDDINGS_START="[Disruptor] Embeddings generation starting"
    API_EMBEDDINGS_STARTED="[Disruptor] Embeddings generation started"
    API_EMBEDDINGS_OK="[Disruptor] Embedding generation success"
    API_EMBEDDINGS_MISS="[Disruptor] System failed to locate embedding field"
    API_EMBEDDINGS_PROGRESS="[Disruptor] Generation progress"
    API_EMBEDDINGS_ENDED="[Disruptor] Embeddings generation completed"
    API_PROMPT="[Disruptor] System prompt"
    API_PROMPT_EMPTY_MSG="System did not generate any answer"
    API_PROMPT_EXCEPTION="[Disruptor hit] System prompt failed"
    API_PROMPT_EXCEPTION_MSG="System unable to generate answer due to service error"
    API_REQUEST_TAG="[Disruptor] System request"
    API_CONTEXT_MATCHES="[Disruptor] Acquired targets "
    API_VECTORS_GENERATED="[Disruptor] Acquired attack vectors "
    # mongodb atlas
    MONGO_CONNECTION_ESTABLISHED = "MongoDB connection established"
    MONGO_CONNECTION_FAILED = "MongoDB connection failed"
    MONGO_HEALTH_CHECK_FAILED = "MongoDB health check failed"
    MONGO_INDEX_CREATED = "Index created in MongoDB"
    MONGO_NO_DOCUMENTS_TO_INSERT = "No documents to insert in MongoDB"
    MONGO_INSERT_SUCCESS = "Documents inserted into MongoDB"
    MONGO_FIND_RESULTS = "Documents retrieved from MongoDB"
    MONGO_COLLECTION_DROPPED = "MongoDB collection dropped"
    # scrapper
    # parser

# self initialize
output_messages = OutputMessages()